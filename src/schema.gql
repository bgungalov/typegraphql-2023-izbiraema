# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  users(page: Int! = 1, limit: Int = 20): PaginatedUserResponse!
  user(_id: String!): User!
  currentUser: User!
  documents(page: Int! = 1, limit: Int = 20): PaginatedDocumentResponse!
  document(_id: String!): Document!
  comments(page: Int! = 1, limit: Int = 20): PaginatedCommentResponse!
  comment(_id: String!): Comment!
  products(page: Int! = 1, limit: Int = 20): PaginatedProductResponse!
  product(_id: String!): Product!
}

type PaginatedUserResponse {
  page: Float!
  items: [User!]!
  totalPages: Float!
  totalItems: Float!
}

type User {
  _id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  address: String
  ucn: String
  city: String
  state: String
  postalCode: String
  roles: [UserRole!]!
}

"""Mongo object id scalar type"""
scalar ObjectId

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  ADMIN_HELPER
  MODERATOR
}

type PaginatedDocumentResponse {
  page: Float!
  items: [Document!]!
  totalPages: Float!
  totalItems: Float!
}

type Document {
  _id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  author: User!
}

type PaginatedCommentResponse {
  page: Float!
  items: [Comment!]!
  totalPages: Float!
  totalItems: Float!
}

type Comment {
  _id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  author: User!
}

type PaginatedProductResponse {
  page: Float!
  items: [Product!]!
  totalPages: Float!
  totalItems: Float!
}

type Product {
  _id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  price: Float!
  description: String!
  manufacturer: User!
}

type Mutation {
  createUser(user: CreateUserInput!): String!
  deleteUser(_id: String!): User!
  updateUser(user: BaseUserInput!, _id: String!): User!
  login(email: String!, password: String!): String!
  createDocument(document: DocumentInput!): Document!
  deleteDocument(_id: String!): Document!
  updateDocument(document: DocumentInput!, _id: String!): Document!
  createComment(comment: CommentInput!): Comment!
  deleteComment(_id: String!): Comment!
  updateComment(comment: CommentInput!, _id: String!): Comment!
  createProduct(product: ProductInput!): Product!
  deleteProduct(_id: String!): Product!
  updateProduct(product: ProductInput!, _id: String!): Product!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  password: String!
  address: String
  ucn: String
  city: String
  state: String
  postalCode: String
  email: String!
}

input BaseUserInput {
  firstName: String!
  lastName: String!
  password: String!
  address: String
  ucn: String
  city: String
  state: String
  postalCode: String
}

input DocumentInput {
  title: String!
  content: String!
  author: ObjectId!
}

input CommentInput {
  title: String!
  content: String!
  author: ObjectId!
}

input ProductInput {
  name: String!
  price: Float!
  description: String!
  manufacturer: ObjectId!
}